{
  "swagger": "3.0",
  "info": {
    "title": "API Reference",
    "version": "3.0",
	"description": "# Introduction\n You can manage items in the Bold Reports On-Premise using the REST API."
  },
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
    "tags": [
    {
      "name": "Authentication",
      "description": "When you sign in to the Bold Reports On-Premise, an authentication token is provided that should be attached in the request header(Authorization) for all subsequent API calls to authenticate the requests.\n"
    },
	{
      "name": "Items",
      "description": "To retrieve, create, modify, and delete a particular item in the Bold Reports On-Premise, use the corresponding endpoints below.\n"
    }
	],
  "paths": {
    "{domain}/reporting/api/site/{tenant-name}/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate User",
        "operationId": "Authentication",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "Email ID of the user."
          },
		  {
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "Password of the user."
          },
		  {
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true,
            "x-nullable": false,
            "description": "The type of credentials used to authorize the request for an access token. Valid values: `\"password\"`"
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "$ref": "#/definitions/Response"
            },
            "x-nullable": true
          },
          "400": {
            "description": "Email ID is empty"
          },
          "404": {
            "description": "User details are not found"
          },
          "401": {
            "description": "Invalid username or password"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }      
    },
    "{domain}/reporting/api/site/{tenant-name}/v3.0/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item Detail",
        "description": "Server retrieves the respective item details for the values (Category Name, Report Name, Datasource Name, Dataset Name, Schedule Name) provided in `serverPath` parameter for the current user.",
        "operationId": "Items_GetItemDetailV3",
        "parameters": [
          {
            "type": "string",
            "name": "itemType",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "ItemType. Valid values: `Category` `Report` `Datasource` `Dataset` `Schedule`"
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "To get the report detail provide your report path like `/{category name}/{report name}`. \\\n And to get the Category, Datasource, Dataset, Schedule detail simply provide the name of the item."
          }
        ],
        "responses": {
          "200": {
            "description": "Item detail retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ApiSpecifiedItemDetail"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the requested parameter is missing or incomplete"
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not GET"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete Item",
        "description": "Users who have a delete access for item (Category, Report, Datasource, Dataset, Schedule) can delete the item on the server by providing (Category Name, Report Name, Datasource Name, Dataset Name, Schedule Name) in `serverPath` parameter",
        "operationId": "Items_DeleteItemV3",
        "parameters": [
          {
            "type": "string",
            "name": "itemType",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "ItemType. Valid values: `Category` `Report` `Datasource` `Dataset` `Schedule`"
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "To delete the report provide your report path like `/{category name}/{report name}`. \\\n And to delete the Category, Datasource, Dataset, Schedule simply provide the name of the item."
          }
        ],
        "responses": {
          "204": {
            "description": "Item Deleted",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the requested parameter is missing or incomplete"
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not DELETE"
          },
          "417": {
            "description": "Failed to delete item"
          }
        }
      }
    },
    "{domain}/reporting/api/site/{tenant-name}/v3.0/reports/schedule": {
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Update Schedule",
        "description": "Users who have write access for schedule can update an existing schedule to the server by providing details of the respective schedule in the request body.",
        "operationId": "Items_UpdateScheduleV3",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "Schedule ID or Schedule Name"
          },
          {
            "name": "apiUpdateScheduleRequestV3",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApiUpdateScheduleRequestV3"
            },
            "x-nullable": true,
            "description": "Details about the schedule passed will be updated to the server."
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule has been updated successfully",
            "schema": {
              "$ref": "#/definitions/ApiScheduleResponse"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not PUT"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Item name already exists"
          },
          "417": {
            "description": "Failed to update schedule"
          }
        }
      },
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Specific Schedule Detail",
        "description": "Server retrieves the respective scheduled item detail for the values (ScheduleId / ScheduleName) provided in `scheduleId` parameter for the current user.",
        "operationId": "Items_GetScheduleItemDetailV3",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "Schedule ID or Schedule Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule detail was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ApiScheduledItemDetail"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not GET"
          }
        }
      }
    },
    "{domain}/reporting/api/site/{tenant-name}/v3.0/schedules/run": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Run Specific Schedule",
        "description": "Users who have read access for schedule can run the scheduled report by providing the ID / Name in the query parameter.",
        "operationId": "Items_RunScheduleReportV3",
        "parameters": [
          {
            "type": "string",
            "name": "scheduleId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "Schedule ID or Schedule Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule has been started successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the requested parameter is missing or incomplete"
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not GET"
          },
          "417": {
            "description": "Failed to run the specified schedule"
          }
        }
      }
    },
    "{domain}/reporting/api/site/{tenant-name}/v3.0/items/location": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item Location",
        "description": "Server returns the item location of the specified item for the value Report Name, Datasource Name, Dataset Name provided in the `serverPath` parameter.",
        "operationId": "Items_GetItemLocationV3",
        "parameters": [
          {
            "type": "string",
            "name": "itemType",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "ItemType. Valid values: `Report` `Datasource` `Dataset`"
          },
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "To get the reports location provide your report path like `/{category name}/{report name}`. \\\nAnd to get the Datasource and Dataset location simply provide the name of the item. "
          }
        ],
        "responses": {
          "200": {
            "description": "Item location has been retrieved successfully",
            "schema": {
              "type": "string"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the requested parameter is missing or incomplete"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not GET"
          },
          "417": {
            "description": "Failed to get the item location"
          }
        }
      }
    },
    "{domain}/reporting/api/site/{tenant-name}/v3.0/reports/export": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Export Report",
        "description": "Users who have read access for reports can export the reports by providing the (report ID or report name), export type (Microsoft Excel, PDF, HTML, PPT, CSV and Micorosft Word) and filter parameters in the request body. \\\n The response will be in an array of bytes.",
        "operationId": "Items_ExportReportV3",
        "parameters": [
          {
            "name": "apiExportReportV3",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApiExportReportV3"
            },
            "x-nullable": true,
            "description": "Details about the report to be exported from the server"
          }
        ],
        "responses": {
          "200": {
            "description": "Report has been exported successfully",
            "schema": {
              "$ref": "#/definitions/ApiExportReportResponse"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "417": {
            "description": "Failed to export an item"
          }
        }
      }
    },
    "{domain}/reporting/api/site/{tenant-name}/v3.0/report/copy": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Copy Report",
        "description": "Users who have access to the report, can copy the report by providing respective report details in the request body",
        "operationId": "Items_CopyReportV3",
        "parameters": [
          {
            "type": "string",
            "name": "serverPath",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "Provide the repot path like `/{category name}/{report name}`"
          },
          {
            "name": "apiCopyReportV3",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApiCopyReportRequestV3"
            },
            "x-nullable": true,
            "description": "Details of the report passed will be copied."
          }
        ],
        "responses": {
          "200": {
            "description": "Report has been copied successfully",
            "schema": {
              "$ref": "#/definitions/ApiCopyItemResponse"
            },
            "x-nullable": true
          },
          "400": {
            "description": "The content of the request body is missing or incomplete"
          },
          "401": {
            "description": "Access Denied"
          },
          "403": {
            "description": "Do not have permission to set report will be copied as public"
          },
          "404": {
            "description": "Item details not found"
          },
          "405": {
            "description": "Request Type was not POST"
          },
          "406": {
            "description": "The content of the request body is invalid"
          },
          "409": {
            "description": "Report will be copied name already exists"
          },
          "417": {
            "description": "Failed to copy report"
          }
        }
      }
    }
  },
  "definitions": {
    "Response": {
      "type": "object",
      "x-typeName": "Response",
      "additionalProperties": false,

      "properties": {
        "access_token": {
          "type": "string",
          "description": "Authentication token of the user"
        },
        "token_type": {
          "type": "string",
          "description": "Type of the token assigned by the authorization server"
        },
        "expires_in": {
          "type": "string",
          "description": "The lifetime in seconds of the access token"
        },
        "userName": {
          "type": "string",
          "description": "Username of the authenticated user"
        }
      }
    },  
    "ApiSpecifiedItemDetail": {
      "type": "object",
      "description": "Item Details.",
      "additionalProperties": false,
      "required": [
        "Id",
        "CreatedById",
        "ItemCreatedDate",
        "ItemModifiedDate",
        "ModifiedById",
        "IsPublic",
        "IsActive",
        "Version"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type."
        },
        "Name": {
          "type": "string",
          "description": "Item name."
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CloneOf": {
          "type": "string",
          "description": "Item ID from where the item was cloned.",
          "format": "guid"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "Extension": {
          "type": "string",
          "description": "Item extension."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true if the item is public."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "Version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "description": "Returns data from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the message from the API."
        }
      }
    },
    "ApiScheduleRequestV3": {
      "type": "object",
      "description": "Details about the schedule passed will be added to the server.",
      "additionalProperties": false,
      "required": [
        "Name",
        "ItemId",
        "ServerPath",
        "ExportType",
        "StartTime",
        "NeverEnd",
        "EndAfterOccurrence",
        "ScheduleType",
        "Enabled"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "Description": {
          "type": "string",
          "description": "File description"
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the Item. Valid values: `Report`"
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the report ID. If you don't know the ID means you may leave this property as empty and provide below `ServerPath` property",
          "format": "guid"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specifies the report path. eg. `/{category name}/{report name}`"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Html` `Pdf` `Word` `PPT` `CSV`."
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "Sets the schedule with no end when specified as true. \\\n Note: By default, the NeverEnd is set to true. To set the end time for schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise it remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \\\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`. \\\n For example: If you provide the end date-time, the schedule will end when the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the report. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \\\n Note: If you chose the schedule type as `Monthly`, provide a values to the MonthlySchedule property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "$ref": "#/definitions/ApiHourlySchedule"
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "$ref": "#/definitions/ApiDailySchedule"
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "$ref": "#/definitions/ApiWeeklySchedule"
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "$ref": "#/definitions/ApiMonthlySchedule"
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "$ref": "#/definitions/ApiYearlySchedule"
        },
        "Enabled": {
          "type": "boolean",
          "description": "If True, Schedule is active."
        },
        "ReportParameter": {
          "type": "array",
          "description": "Specify the schedule parameter",
          "items": {
            "$ref": "#/definitions/ApiReportParameter"
          }
        }
      }
    },
    "ApiHourlySchedule": {
      "type": "object",
      "description": "Runs the schedules on an hourly basis.",
      "additionalProperties": false,
      "required": [
        "ScheduleInterval"
      ],
      "properties": {
        "ScheduleInterval": {
          "type": "string",
          "description": "Specifies the hour interval. Based on this interval the schedule will run continuously until the end time. The format should be `HH:mm`."
        }
      }
    },
    "ApiDailySchedule": {
      "type": "object",
      "description": "Runs the schedules on a daily basis. \n            ",
      "additionalProperties": false,
      "required": [
        "RecurrenceType",
        "EveryNdays",
        "EveryWeekday"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.  Valid values: `EveryNdays` `EveryWeekday`. \\\n Note: If you chose the recurrence type as EveryNdays, provide a value to the EveryNdays property, and leave the (EveryWeekday) property empty."
        },
        "EveryNdays": {
          "type": "integer",
          "description": "Specifies the day interval the schedule recurs. \\\n For example: If you provide 2, the schedule recurs every 2 days.",
          "format": "int32"
        },
        "EveryWeekday": {
          "type": "boolean",
          "description": "For the schedule to recur every working day, set to true."
        }
      }
    },
    "ApiWeeklySchedule": {
      "type": "object",
      "description": "Runs the schedule on a weekly basis.",
      "additionalProperties": false,
      "required": [
        "RecurrenceWeeks",
        "RecurrenceDays"
      ],
      "properties": {
        "RecurrenceWeeks": {
          "type": "integer",
          "description": "Specifies the number of weeks the schedule recurs. \\\n For example: If you provide 2, the schedule will recur every 2 weeks.  ",
          "format": "int32"
        },
        "RecurrenceDays": {
          "type": "array",
          "description": "Specifies the list of  days the schedule recurs. Valid values `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \\\n For example: If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiMonthlySchedule": {
      "type": "object",
      "description": "Runs the schedule on a monthly basis.",
      "additionalProperties": false,
      "required": [
        "RecurrenceType"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a specific day or on the customized day basis. Valid values: `DayRecurrence` `CustomRecurrence` \\\n Note: If you chose the recurrence type as DayRecurrence, provide a value to the DayRecurrence property and leave the (CustomRecurrence) property empty."
        },
        "DayRecurrence": {
          "description": "The schedule recurs on the day specified on the month interval.",
          "$ref": "#/definitions/ApiMonthlyScheduleDayRecurrence"
        },
        "CustomRecurrence": {
          "description": "The schedule recurs on the customized day of the specified month interval.",
          "$ref": "#/definitions/ApiMonthlyScheduleCustomRecurrence"
        }
      }
    },
    "ApiMonthlyScheduleDayRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the day specified on the month interval.",
      "additionalProperties": false,
      "required": [
        "DayInterval",
        "MonthInterval"
      ],
      "properties": {
        "DayInterval": {
          "type": "integer",
          "description": "Specifies the number of day interval the schedule recurs. \\\n For example: If you provide 10, the schedule will recur every 10th day. ",
          "format": "int32"
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \\\n For example: If you provide 3, the schedule will recur 10th day of every 3 months.",
          "format": "int32"
        }
      }
    },
    "ApiMonthlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the customized day of the specified month interval.",
      "additionalProperties": false,
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthInterval"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs. Valid values: `first` `second` `third` `fourth` `last`. \\\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of the week the schedule recurs. Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \\\n For example: If you provide Sunday, the schedule will recur on the second week of sunday."
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \\\n For example: If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
          "format": "int32"
        }
      }
    },
    "ApiYearlySchedule": {
      "type": "object",
      "description": "Runs the schedules on a yearly basis.",
      "additionalProperties": false,
      "required": [
        "YearInterval",
        "RecurrenceType"
      ],
      "properties": {
        "YearInterval": {
          "type": "integer",
          "description": "Specifies the number of years the schedule recurs. \\\n For example: If you provide 5, the schedule will recur every 5 years.",
          "format": "int32"
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis. Valid values: `MonthRecurrence` `CustomRecurrence`. \\\n Note: If you chose the recurrence type as MonthRecurrence, provide a value to the MonthRecurrence property, and leave the (CustomRecurrence) property empty."
        },
        "MonthRecurrence": {
          "description": "The schedule recurs on the month and number of years specified in YearInterval property.",
          "$ref": "#/definitions/ApiYearlyScheduleMonthRecurrence"
        },
        "CustomRecurrence": {
          "description": "The schedule recurs in the customized month based on the number of years provided in the YearInterval property.",
          "$ref": "#/definitions/ApiYearlyScheduleCustomRecurrence"
        }
      }
    },
    "ApiYearlyScheduleMonthRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the month and number of years specified in YearInterval property.",
      "additionalProperties": false,
      "required": [
        "MonthOfYear",
        "DayOfMonth"
      ],
      "properties": {
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs. Valid values: `January` `February` `March` `April` `May` `June` `July` `August` `September` `October` `November` `December`. \\\n For example: If you provide April, the schedule will recur in April of every year. Here the (year) is the value provided in the YearInterval property."
        },
        "DayOfMonth": {
          "type": "integer",
          "description": "Specifies the day of the month the schedule recurs. \\\n For example: If you provide 20, the schedule will recur 20th April of every year.  Here the (year) is the value provided in the YearInterval property.",
          "format": "int32"
        }
      }
    },
    "ApiYearlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs in the customized month based on the number of years provided in the YearInterval property.",
      "additionalProperties": false,
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthOfYear"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs. Valid values: `first` `second` `third` `fourth` `last`. \\\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of week the schedule recurs. Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`.\\\n For example: If you provide Sunday, the schedule will recur on every sunday's of the second week."
        },
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs.  Valid values: `January` `February` `March` `April` `May` `June` `July` `August` `September` `October` `November` `December`. \\\n For example: If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here the (year) is the value provided in the YearInterval property."
        }
      }
    },
    "ApiReportParameter": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "type": "string",
          "description": "Parameter name."
        },
        "Values": {
          "type": "array",
          "description": "Parameter values. The Date parameters input values are validated based on the server culture. Valid formats for en-us culture as following: `mm/dd/yyyy` `yyyy/mm/dd` `dd/mmm/yyyy` `mmm/dd/yyyy` `yyyy/dd/mmm` `yyyy/mmm/dd`.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiScheduleResponse": {
      "type": "object",
      "description": "Response Details of schedules created.",
      "additionalProperties": false,
      "required": [
        "ScheduleId"
      ],
      "properties": {
        "ScheduleName": {
          "type": "string",
          "description": "Returns the schedule name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Returns the schedule ID.",
          "format": "guid"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Returns the schedule type."
        },
        "NextRun": {
          "type": "string",
          "description": "Returns the schedule’s next run."
        }
      }
    },
    "ApiUpdateScheduleRequestV3": {
      "type": "object",
      "description": "Details about the schedule passed will be updated to the server.",
      "additionalProperties": false,
      "required": [
        "ItemId",
        "ServerPath",
        "ItemType",
        "NeverEnd",
        "EndAfterOccurrence",
        "Enabled"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "ItemId": {
          "type": "string",
          "description": "Specifies the report ID. If you don't know the ID means you may leave this property as empty and provide below `ServerPath` property",
          "format": "guid"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specifies the reports path. eg. `/{category name}/{report name}`"
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the Item. Valid values: `Report`"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Html` `Pdf` `Word` `PPT` `CSV`."
        },
        "Description": {
          "type": "string",
          "description": "File description"
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "Sets the schedule with no end when specified as true. \\\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \\\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`. \\\n For example: If you provide the end date-time, the schedule will end once the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "RemoveUserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "RemoveGroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to remove groups from the schedule subscriptions.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "RemoveExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to remove email recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the report. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \\\n Note: If you chose the schedule type as `Monthly`, provide a values to the MonthlySchedule property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "$ref": "#/definitions/ApiHourlySchedule"
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "$ref": "#/definitions/ApiDailySchedule"
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "$ref": "#/definitions/ApiWeeklySchedule"
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "$ref": "#/definitions/ApiMonthlySchedule"
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "$ref": "#/definitions/ApiYearlySchedule"
        },
        "ExportFileSettingsInfo": {
          "type": "string",
          "description": "Export File settings information."
        },
        "Enabled": {
          "type": "boolean",
          "description": "If True, Schedule is active."
        },
        "ReportParameter": {
          "type": "array",
          "description": "Specify the schedule parameter",
          "items": {
            "$ref": "#/definitions/ApiReportParameter"
          }
        }
      }
    },
    "ApiScheduledItemDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "CreatedById",
        "CreatedDate",
        "ExportTypeId",
        "IsActive",
        "IsEnabled",
        "ModifiedDate",
        "ModifiedById",
        "RecurrenceTypeId",
        "ReportId",
        "ScheduleId",
        "StartDate",
        "NeverEnd",
        "EndAfterOccurrence"
      ],
      "properties": {
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the report export type."
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the the end date of the schedule.",
          "format": "date-time"
        },
        "ExportTypeId": {
          "type": "integer",
          "description": "Specifies the export type id of schedule.",
          "format": "int32"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the Schedule is active."
        },
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the Schedule is enabled."
        },
        "ItemType": {
          "type": "string",
          "description": "Specifies the ItemType."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "NextSchedule": {
          "type": "string",
          "description": "Specifies the Next scheduled date and time.",
          "format": "date-time"
        },
        "RecurrenceInfo": {
          "type": "string",
          "description": "Specifies the recurrence information of the schedule."
        },
        "RecurrenceTypeId": {
          "type": "integer",
          "description": "Specifies the recurrence Id of the schedule.",
          "format": "int32"
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type of the schedule."
        },
        "ReportId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ReportName": {
          "type": "string",
          "description": "Item name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Schedule ID.",
          "format": "guid"
        },
        "ScheduleName": {
          "type": "string",
          "description": "Schedule name."
        },
        "StartDate": {
          "type": "string",
          "description": "Specifies the start date of the schedule.",
          "format": "date-time"
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "Sets the schedule with no end when specified as true. \\\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \\\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of username, email, or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email IDs to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "$ref": "#/definitions/ApiHourlySchedule"
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "$ref": "#/definitions/ApiDailySchedule"
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "$ref": "#/definitions/ApiWeeklySchedule"
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "$ref": "#/definitions/ApiMonthlySchedule"
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "$ref": "#/definitions/ApiYearlySchedule"
        },
        "ReportParameter": {
          "type": "array",
          "description": "Specify the schedule parameter",
          "items": {
            "$ref": "#/definitions/ApiReportParameter"
          }
        }
      }
    },
    "ApiExportReportV3": {
      "type": "object",
      "description": "Details about the report to be exported from the server",
      "additionalProperties": false,
      "required": [
        "ReportId",
        "ExportType"
      ],
      "properties": {
        "ReportId": {
          "type": "string",
          "description": "Specifies report id, If you don't the ID means you may leave this property as empty and provide below `ServerPath` property.",
          "format": "guid"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specifies the server path eg. `/{category name}/{report name}`"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type. Valid values: `\"Excel\"` `\"Html\"` `\"Pdf\"` `\"Word\"` `\"PPT\"` `\"CSV\"`"
        },
        "FilterParameters": {
          "type": "string",
          "description": "Specify the filter parameter values to be applied in reports. The JSON for the different types of parameters includes, \n\n 1. For String parameter - {\"FilterParameters\":\"{\\'SalesOrderNumber':['SO50750']}\"} \n\n  2. For Integer parameter - {\"FilterParameters\":\"{\\'InvoiceID':['10252']}\"} \n\n 3. For Date parameter - {\"FilterParameters\":\"{\\'StartDate':['1/1/2003'],\\'EndDate':['1/31/2003']}\"} \n\n 4. For Boolean parameter - {\"FilterParameters\":\"{\\'ReportParameter1':['true']}\"} \n\n The Date parameters input values are validated based on the server culture. Valid formats for en-us culture as following: `mm/dd/yyyy` `yyyy/mm/dd` `dd/mmm/yyyy` `mmm/dd/yyyy` `yyyy/dd/mmm` `yyyy/mmm/dd`."
        }
      }
    },
    "ApiExportReportResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "FileContent": {
          "type": "string",
          "description": "Returns the exported report in an array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiCopyReportRequestV3": {
      "type": "object",
      "description": "Details of the report passed will be copied.",
      "additionalProperties": false,
      "required": [
        "Name",
        "CategoryId",
        "IsPublic",
        "IsCopyDatasource",
        "IsCopyDataset"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "report name."
        },
        "Description": {
          "type": "string",
          "description": "report description."
        },
        "CategoryId": {
          "type": "string",
          "description": "Target Category ID. If you don't the ID means you may leave this property as empty and provide your existing category name in below `CategoryName` property.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Target Category name "
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Specify true to set the item as a public."
        },
        "IsCopyDatasource": {
          "type": "boolean",
          "description": "Copy the data source of report based on this value "
        },
        "IsCopyDataset": {
          "type": "boolean",
          "description": "Copy the dataset of report based on this value "
        }
      }
    },
    "ApiCopyItemResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ApiStatus",
        "Status",
        "PublishedItemId",
        "Version"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "PublishedItemId": {
          "type": "string",
          "description": "Returns the published data source item id",
          "format": "guid"
        },
        "Version": {
          "type": "integer",
          "description": "Returns the version number of the data source",
          "format": "int32"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {}
}