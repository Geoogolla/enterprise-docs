{
  "swagger": "1.0",
  "info": {
    "title": "API Reference",
    "version": "1.0",
    "description": "#  Introduction\n Our application provides a RESTful web API that allows other third-party applications to interact with the Bold Reports on-premise programmatically. It supports read, create, edit, and delete operations, which are usually in JSON format. Application startups, tenants, and users, among other items, can be handled using REST APIs.\n\n ## Authentication\n\n **Bearer  (token)** \n\n JWT token Authentication \n\n| Security Scheme Type | HTTP| \n|---------- | --------------------- |\n| HTTP Authorization Scheme       | bearer  |\n| Bearer format |JWT|"
  },
  
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Bold Reports API uses OAuth 2.0 authentication based on client credentials. To make an API request, you need to generate an access token using the client ID and secret. For subsequent API requests, this access token should be sent in the Authorization header. This access token is valid for 60 minutes from the time it is received.\n\n For information on how to retrieve the client ID and secret for the REST API, please refer to [this](https://help.boldreports.com/enterprise-reporting/administrator-guide/manage-tenants/site-administration/api-keys/) documentation."
    },
    {
      "name": "Application Startup",
      "description": "The Bold BI or Bold Reports application can be configured for the first time using this API.\n\nYou will need an offline unlock key, which can be found [here](https://www.boldreports.com/account/downloads) , to activate Bold BI or Bold Reports.\nPlease open a support ticket [here](https://support.boldreports.com/create) if you don't have access to the offline key."
    },
    {
      "name": "Tenants",
      "description": " Creating tenants for Bold BI/Bold Reports using an API can be a powerful and efficient way to manage and organize your data. The request body should be in JSON format, and you can provide the tenant information in JSON format. Include the necessary headers for the API request, such as the Content-Type and Accept headers. To create the Bold BI/Bold Reports tenants, use the following corresponding endpoints."
    }
	],
  "paths": {
    "{domain}/api/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate Client",
		"description" : "To call the token API, you will need to make a POST request to the API endpoint, typically in the format of `https://your-domain/api/token`.\n You will need to include the following parameters in the body of the request:\n\n - grant_type: client_credentials \n\n - client_id: your client ID \n\n - client_secret: your client secret\n\n You will also need to include the appropriate headers for the API, such as Content-Type: `application/x-www-form-urlencoded`.",
        "operationId": "client_authentication",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Authentication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrived access token.",
           "schema": {
              "$ref": "#/components/schemas/Response"
            }
          },
          "400": {
            "description": "Only grant_type=client_credentials requests are accepted by this server."
          },
          "401": {
            "description": "Invalid client_id or client_secret"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
	"{domain}/api/v1.0/startup": {
      "post": {
        "tags": [
          "Application Startup"
        ],
        "summary": "Application Startup",
        "description": "Configure the Bold BI or Bold Reports application using the REST API.\n\n **No AUTHORIZATION** \n\nContent-Type: `application/json`.",
        "operationId": "application_startup",
		"parameters": [
          {
            "name": "startup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Startup"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                },
				"x-nullable": true
            },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
	"{domain}/api/v1.0/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create New Tenant", 
        "description": "Create a new Bold BI / Bold Reports tenant. \n\n AUTHORIZATION: [Bearer (token)](/#section/Introduction/Authentication) \n\nContent-Type: `application/json`.",
        "operationId": "create_tenant",
		"parameters": [
          {
            "name": "Tenant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AddTenantV1"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    }
  },
 "parameters": {},
    "responses": {},
    "securityDefinitions": {},
  "components": {
    "schemas": {
		"Response": {
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "access_token": {
            "type": "string",
            "description": "Authentication token of the client."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "clientId": {
            "type": "string",
            "description": "Client ID of the internal app."
          },
          "TenantStatus": {
            "type": "string",
            "description": "Status of the client."
          },
          ".confidentiality_level": {
            "type": "string",
            "description": "Level of token confidentiality."
          },
          ".issued": {
            "type": "string",
            "description": "Authorization token issued date/time."
          },
          ".expires": {
            "type": "string",
            "description": "Authorization token expires on date/time."
          }
        },
        "x-typeName": "Response"
      },
       "Authentication": {
		   "type": "object",
        "required": [
          "grant_type",
          "client_id",
          "client_secret"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>",
            "nullable": false
          },
          "client_id": {
            "type": "string",
            "description": "Client ID of the internal app.",
            "nullable": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret of the internal app.",
            "nullable": false
          }
        }
      },
	  "Startup": {
        "type": "object",
        "description": "Startup Configuration object details.",
        "additionalProperties": false,
        "properties": {
          "ServerConfiguration": {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          "UmsConfiguration": {
            "$ref": "#/components/schemas/UmsConfiguration"
          },
		   "DataStoreConfiguration": {
            "$ref": "#/components/schemas/DataStoreConfiguration"
          }
        }
      },
	  "ServerConfiguration": {
        "type": "object",
        "description": "Site configuration data.",
        "additionalProperties": false,
        "required": [
          "Database",
          "Storage",
          "Site"
        ],
        "properties": {
          "Database": {
            "$ref": "#/components/schemas/Database"
          },
          "Storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "Site": {
            "$ref": "#/components/schemas/Site"
          }
        }
      },
	  "Database": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
          "ServerType"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](https://staginghelp.boldbi.com/embedded-bi/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter."
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
          "ServerType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          },
		  "SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
        }
      },
	  "Storage": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "StorageType"
        ],
        "properties": {
          "StorageType": {
            "description": "Storage type.",
            "$ref": "#/components/schemas/StorageType"
          },
          "AzureBlob": {
            "description": "Azure Blob data.",
            "$ref": "#/components/schemas/AzureBlob"
          }
        }
      },
      "StorageType": {
		  "description": "0 - FileStorage, 1 - AzureBlob",
        "type": "enum",
        "enum": [
          0,
          1
        ],
        "x-enumNames": [
          "FileStorage",
          "AzureBlob"
        ]
      },
      "DatabaseType": {
		   "description": "0 - MSSQL, 1 - MySQL,2-PostgreSQL",
        "type": "enum",
        "enum": [
          0,
          1,
          2
        ],
        "x-enumNames": [
          "MSSQL",
          "MySQL",
          "PostgreSQL"
        ]
      },
      "TenantType": {
		  "description": "3 - BoldBIOnPremise, 4 - BoldReportsOnPremise",
        "type": "enum",
        "enum": [
          3,
          4
        ],
        "x-enumNames": [
          "BoldBIOnPremise",
          "BoldReportsOnPremise"
        ]
      },
      "AzureBlob": {
        "type": "object",
        "description": "Required only if the storage type is <code>AzureBlob</code>",
        "additionalProperties": false,
        "required": [
          "AzureBlobStorageContainerName",
          "AzureBlobStorageUri",
          "AccountName",
          "AccessKey"
        ],
        "properties": {
          "AzureBlobStorageContainerName": {
            "type": "string",
            "description": "Azure Blob storage container Name."
          },
          "AzureBlobStorageUri": {
            "type": "string",
            "description": "Azure Blob storage URI."
          },
          "ConnectionString": {
            "type": "string",
            "description": "Connection string of the blob."
          },
          "ConnectionType": {
            "type": "string",
            "description": "Connection type.<ul><li><code>http</code></li><li><code>https</code></li></ul>"
          },
          "AccountName": {
            "type": "string",
            "description": "Account name of the blob."
          },
          "AccessKey": {
            "type": "string",
            "description": "Access key of the blob"
          }
        }
      },
      "Site": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "TenantName",
          "TenantIdentifier",
          "TenantType"
        ],
        "properties": {
          "TenantName": {
            "type": "string",
            "description": "Name of the site."
          },
          "TenantIdentifier": {
            "type": "string",
            "description": "Identifier of the site."
          },
          "UseSiteIdentifier": {
            "type": "boolean",
            "description": "Decides whether we need to use or ignore the site identifier. If the site identifier is ignored, unique domain should be used for each site."
          },
          "TenantType": {
            "description": "Tenant type of the site.",
            "$ref": "#/components/schemas/TenantType"
          },
          "UseCustomBranding": {
            "type": "boolean",
            "description": "Decides to use branding details from ID."
          },
          "CustomAttribute": {
            "type": "array",
            "description": "Custom site attributes. <br/><blockquote>Applicable to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
            "items": {
            "$ref": "#/components/schemas/CustomAttribute"
          }
          },
        }
      },
	  "CustomAttribute": {
        "type": "object",
        "required": [
          "Name",
          "Value",
          "Description",
          "CanEncrypt"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the site attribute."
          },
          "Value": {
            "type": "string",
            "description": "Value for the site attribute."
          },
          "Description": {
            "type": "string",
            "description": "Description of the attribute."
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Decides to encrypt the site attribute data."
          }
        }
      },
	  "User": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
          "LastName",
          "Password"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "Password": {
            "type": "string",
            "description": "Password of the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
          }
        }
      },
	  "UmsConfiguration": {
        "type": "object",
        "description": "Site administration configuration data.",
        "additionalProperties": false,
        "required": [
          "Database",
          "Storage",
          "User",
          "Unlockkey"
        ],
        "properties": {
          "Database": {
            "$ref": "#/components/schemas/Database"
          },
          "Storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "User": {
            "$ref": "#/components/schemas/User"
          },
          "Unlockkey": {
            "type": "string",
            "description": "Unlock key for the Bold BI/Reports application."
          }
        }
      },
	  "DataStoreConfiguration": {
        "type": "object",
        "description": "Data store configuration of the site <blockquote>required to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
        "additionalProperties": false,
        "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
          "ServerType"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](https://staginghelp.boldbi.com/embedded-bi/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter."
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
          "ServerType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          },
		  "SslEnabled":
		  {
			  "type": "boolean",
			  "default": "false",
            "description": "Determines whether the encrypted connection to the database server is required. "
		  },
		   "AdditionalParameters": 
		  {
			"type": "string",
            "description": "Additional parameters for connecting to the database server."
		  }
        }
      },
	  "ApiResponse": {
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
	  "AddTenantV1": {
        "type": "object",
        "description": "site detail",
        "additionalProperties": false,
        "required": [
          "DatabaseType",
          "DbConnectionString",
          "EmailDomain",
          "TenantName",
          "TenantIdentifier",
          "TenantType",
          "StorageType"
        ],
        "properties": {
          "DatabaseType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          },
          "DbConnectionString": {
            "type": "string",
            "description": "Database connection string of the server.<ul><li>MSSQL - Data Source=;Initial Catalog=;User ID=;Password=;Encrypt=False</li><li>Postgre SQL - Host=;Port=5432;Database=;Username=;Password=;SSL Mode=Require</li><li>MySql - Server=;Database=;User Id=;Password=;SSL Mode=Required</li></ul>"
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether to create a new database or connect to an existing database specified by the <code>DatabaseName</code> parameter."
          },
          "MaintenanceDataBase": {
            "type": "string",
            "description": "Maintenance database of the database server."
          },
          "EmailDomain": {
            "type": "string",
            "description": "Email address of the user."
          },
          "TenantName": {
            "type": "string",
            "description": "Tenant name of the site."
          },
          "TenantIdentifier": {
            "type": "string",
            "description": "Tenant identifier of the site."
          },
          "TenantType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/TenantType"
          },
          "StorageType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/StorageType"
          },
		  "DataStoreConfiguration": {
            "$ref": "#/components/schemas/DataStoreConfiguration"
          },
          "CustomAttribute": {
            "type": "array",
            "description": "Custom site attributes. <br/><blockquote>Applicable to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
            "items": {
            "$ref": "#/components/schemas/CustomAttribute"
          }
          }
        }
      }
	}
  }
 } 