{
  "swagger": "1.0",
  "info": {
    "title": "API Reference",
    "version": "1.0",
    "description": "#  Introduction\n You can manage users,groups,items and permissions in the Bold Reports On-Premise using the REST API."
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "When you sign in to our application, an authentication token is provided that should be attached in the request header(Authorization) for all subsequent API calls to authenticate the requests.\n"
    },
    {
      "name": "Application Startup",
      "description": "Configure the Bold BI or Bold Reports application for the first time. To activate Bold BI or Bold Reports, you need an offline unlock key, and that can be obtained [here](https://www.boldbi.com/account/downloads/embedded). If you don't have access to the offline key, please create a support ticket [here](https://support.boldbi.com/create).\n"
    },
    {
      "name": "Tenants",
      "description": "To create, view, update, delete, and list the Bold BI/Bold Reports tenants, use the following corresponding end points.\n"
    }
	],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate Client",
        "operationId": "client_authentication",
        "parameters": [
          {
            "name": "token",
			 "description": "x-www-form-urlencoded.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Authentication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrived access token.",
            "x-nullable": true
          },
          "400": {
            "description": "Only grant_type=client_credentials requests are accepted by this server."
          },
          "401": {
            "description": "Invalid client_id or client_secret"
          },
          "405": {
            "description": "Request type was not POST"
          }
        }
      }
    },
	"/v1.0/startup": {
      "post": {
        "tags": [
          "Application Startup"
        ],
        "summary": "Application Startup",
        "description": "Configure the application startup for Bold BI/Bold Reports application.",
        "operationId": "application_startup",
		"parameters": [
          {
		   "description": "configuration request data.",
            "name": "startup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Startup"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                },
				"x-nullable": true
            },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startup"
      }
    },
	"/v1.0/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create New Tenant",
        "description": "Create a new Bold BI / Bold Reports tenant.",
        "operationId": "create_tenant",
		"parameters": [
          {
		   "description": "Add tenant request body.",
            "name": "Tenant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AddTenantV1"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant added successfully.",
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
          },
          "400": {
            "description": "The content of the request body is missing or incomplete.",
            "content": {}
          },
          "401": {
            "description": "Access denied.",
            "content": {}
          },
          "405": {
            "description": "Request type was not POST.",
            "content": {}
          },
          "406": {
            "description": "The content of the request body is invalid.",
            "content": {}
          },
          "417": {
            "description": "Failed to add tenant.",
            "content": {}
          }
        }
      }
    }
  },
  "definitions": {
    "Response": {
      "type": "object",
      "x-typeName": "Response",
      "additionalProperties": false,

      "properties": {
        "access_token": {
          "type": "string",
          "description": "Authentication token of the user"
        },
        "token_type": {
          "type": "string",
          "description": "Type of the token assigned by the authorization server"
        },
        "expires_in": {
          "type": "string",
          "description": "The lifetime in seconds of the access token"
        },
        "userName": {
          "type": "string",
          "description": "Username of the authenticated user"
        }
      },
    },
    "ApiResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Data": {
          "description": "Returns data from the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "Message": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "ApiGroupAdd": {
      "type": "object",
      "description": "Group detail",
      "required": [
        "Name"
      ],
      "properties": {
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        }
      }
    },
    "ApiGroupEdit": {
      "type": "object",
      "description": "Group detail",
      "properties": {
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        }
      }
    },
    "ApiGroup": {
      "type": "object",
      "description": "Group detail",
      "required": [
        "Id",
        "IsActiveDirectoryGroup",
        "IsAzureADGroup"
      ],
      "properties": {
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "Id": {
          "type": "integer",
          "description": "ID of the group.",
          "format": "int32"
        },
        "IsActiveDirectoryGroup": {
          "type": "boolean",
          "description": "Returns true if the group is added from Active Directory"
        },
        "IsAzureADGroup": {
          "type": "boolean",
          "description": "Returns true if the group is added from Azure Active Directory"
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        }
      }
    },
    "ApiUserList": {
      "type": "object",
      "description": "List of users",
      "properties": {
        "UserList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUser"
          }
        }
      }
    },
    "ApiUser": {
      "type": "object",
      "description": "User detail",
      "required": [
        "IsActive",
        "IsActiveDirectoryUser",
        "IsAzureAdUser",
        "UserId",
        "UserStatus"
      ],
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the user is an active user."
        },
        "IsActiveDirectoryUser": {
          "type": "boolean",
          "description": "Returns true if the user is added from Active Directory"
        },
        "IsAzureAdUser": {
          "type": "boolean",
          "description": "Returns true if the user is added from Azure Active Directory."
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "UserStatus": {
          "description": "Returns the status of the user.",
          "allOf": [
            {
              "$ref": "#/definitions/UserStatus"
            }
          ]
        }
      }
    },
    "UserStatus": {
      "type": "integer",
      "description": "",
      "x-enumNames": [
        "Active",
        "InActive"
      ],
      "enum": [
        0,
        1
      ]
    },
    "ApiGroupUsers": {
      "type": "object",
      "description": "User(s) added/removed from the group.",
      "properties": {
        "Id": {
          "type": "array",
          "description": "List of user IDs",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ApiGroupListV2": {
      "type": "object",
      "properties": {
        "GroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiGroupV2"
          }
        }
      }
    },
    "ApiGroupV2": {
      "type": "object",
      "required": [
        "Id",
        "IsActiveDirectoryGroup",
        "IsAzureADGroup",
        "UserCount"
      ],
      "properties": {
        "Description": {
          "type": "string",
          "description": "Description of the group."
        },
        "Id": {
          "type": "integer",
          "description": "ID of the group.",
          "format": "int32"
        },
        "IsActiveDirectoryGroup": {
          "type": "boolean",
          "description": "Returns true if the group is added from Active Directory"
        },
        "IsAzureADGroup": {
          "type": "boolean",
          "description": "Returns true if the group is added from Azure Active Directory"
        },
        "Name": {
          "type": "string",
          "description": "Name of the group."
        },
        "UserCount": {
          "type": "integer",
          "description": "User(s) count",
          "format": "int32"
        }
      }
    },
    "ApiSpecifiedItemDetail": {
      "type": "object",
      "description": "Item Details.",
      "required": [
        "Id",
        "CreatedById",
        "ItemCreatedDate",
        "ItemModifiedDate",
        "ModifiedById",
        "IsPublic",
        "IsActive"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Item type."
        },
        "Name": {
          "type": "string",
          "description": "Item name."
        },
        "Description": {
          "type": "string",
          "description": "Item description."
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CloneOf": {
          "type": "string",
          "description": "Item ID from where the item was cloned.",
          "format": "guid"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "Extension": {
          "type": "string",
          "description": "Item extension."
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Returns true if the item is public."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        }
      }
    },
    "ApiCategoryAdd": {
      "type": "object",
      "description": "Category details.",
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Category name."
        },
        "Description": {
          "type": "string",
          "description": "Category description."
        }
      }
    },
    "ApiValidateItemName": {
      "type": "object",
      "description": "Validation details of the item.",
      "required": [
        "ItemName",
        "ItemType"
      ],
      "properties": {
        "ItemName": {
          "type": "string",
          "description": "Item name. Valid values: `\"report name\"` `\"Datasource name\"` `\"dataset name\"` `\"Schedule name\"` "
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name."
        },
        "ItemType": {
          "type": "string",
          "description": "Item type. Valid values: `\"Category\"` `\"Report\"` `\"Datasource\"` `\"Dataset\"` `\"Schedule\"`"
        }
      }
    },
    "ApiCategoryUpdate": {
      "type": "object",
      "description": "Category details.",
      "required": [
        "CategoryId"
      ],
      "properties": {
        "CategoryId": {
          "type": "string",
          "description": "Category ID.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Category name."
        },
        "Description": {
          "type": "string",
          "description": "Category description."
        }
      }
    },
    "ApiItemResponse": {
      "type": "object",
      "description": "Response details of item.",
      "required": [
        "ApiStatus",
        "Status",
        "PublishedItemId",
        "Version"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "PublishedItemId": {
          "type": "string",
          "description": "Returns the ID of the published item.",
          "format": "guid"
        },
        "Version": {
          "type": "integer",
          "description": "Returns the version of the published file item.",
          "format": "int32"
        }
      }
    },
    "ApiReportAddV5": {
      "type": "object",
      "description": "Report details",
      "required": [
        "Name",
        "CategoryId",
        "IsPublic",
        "ItemContent"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Report name"
        },
        "Description": {
          "type": "string",
          "description": "Report description"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID",
          "format": "guid"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specify the relative Path of the item"
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Specify true to set the item as a public"
        },
        "DataSetMappingInfo": {
          "type": "array",
          "description": "Mapping information of dataset",
          "items": {
            "$ref": "#/definitions/DataSetMappingInfoV5"
          }
        },
        "DataSourceMappingInfo": {
          "type": "array",
          "description": "Mapping information of datasource",
          "items": {
            "$ref": "#/definitions/DataSourceMappingInfoV5"
          }
        },
        "ItemContent": {
          "type": "string",
          "description": "Provide items in an array of bytes",
          "format": "byte"
        }
      }
    },
    "DataSetMappingInfoV5": {
      "type": "object",
      "description": "Mapping information of dataset",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name"
        },
        "DataSetId": {
          "type": "string",
          "description": "Dataset ID. \n\n **Note:** It is not a mandatory field but we must provide either `DataSetId` or `DataSetName` property to map the dataset",
          "format": "guid"
        },
        "DataSetName": {
          "type": "string",
          "description": "Dataset name"
        }
      }
    },
    "DataSourceMappingInfoV5": {
      "type": "object",
      "description": "Mapping information of datasource",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name"
        },
        "DataSourceId": {
          "type": "string",
          "description": "Datasource ID. \n\n  **Note:** It is not a mandatory field but we must provide either `DataSourceId` or `DataSourceName` property to map the datasource.",
          "format": "guid"
        },
        "DataSourceName": {
          "type": "string",
          "description": "Datasource name"
        }
      }
    },
    "ApiReportDataSourceAdd": {
      "type": "object",
      "description": "Datasource details",
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Datasource name"
        },
        "Description": {
          "type": "string",
          "description": "Datasource description"
        },
        "DataSourceDefinition": {
          "description": "Datasource definition",
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceDefinition"
            }
          ]
        }
      }
    },
    "DataSourceDefinition": {
      "type": "object",
      "description": "Datasource definition",
      "required": [
        "CredentialRetrieval",
        "Enabled",
        "EnabledSpecified",
        "OriginalConnectStringExpressionBased",
        "UseOriginalConnectString",
        "WindowsCredentials",
        "WindowsCredentialsSpecified",
        "ServerType"
      ],
      "properties": {
        "ConnectString": {
          "type": "string",
          "description": "Datasource connection string"
        },
        "CredentialRetrieval": {
          "type": "string",
          "description": "Set the type of credentials to secure data. Valid values: `Prompt`, `Store`, `Integrated`, `None`"
        },
        "Password": {
          "type": "string",
          "description": "Specifies the password of connection credentials"
        },
        "Prompt": {
          "type": "string",
          "description": "Specifies the text that prompts users for a username and password"
        },
        "UserName": {
          "type": "string",
          "description": "Specifies the username of connection credentials"
        },
        "WindowsCredentials": {
          "type": "boolean",
          "description": "Set to true to use Windows credentials when connecting to the datasource"
        },
        "ServerType": {
          "type": "string",
          "description": "Specify the server type. Valid values: `SQL`, `SQLCE`, `OLEDB`, `ODBC`, `Oracle`, `XML`, `SSAS`, `PostgreSQL`"
        }
      }
    },
    "ApiReportDataSetAddV5": {
      "type": "object",
      "description": "Dataset details",
      "required": [
        "Name",
        "ItemContent"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Dataset name"
        },
        "Description": {
          "type": "string",
          "description": "Dataset description"
        },
        "DataSourceMappingInfo": {
          "type": "array",
          "description": "Datasource mapping information",
          "items": {
            "$ref": "#/definitions/DataSourceMappingInfoV5"
          }
        },
        "ItemContent": {
          "type": "string",
          "description": "Provide items in an array of bytes",
          "format": "byte"
        }
      }
    },
    "ApiReportUpdateV5": {
      "type": "object",
      "description": "Report details",
      "required": [
        "ItemId",
        "CategoryId",
        "IsPublic"
      ],
      "properties": {
        "ItemId": {
          "type": "string",
          "description": "Item ID",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Report name"
        },
        "Description": {
          "type": "string",
          "description": "Report description"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID",
          "format": "guid"
        },
        "VersionComment": {
          "type": "string",
          "description": "Comments about update"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specify the relative Path of the item"
        },
        "IsPublic": {
          "type": "boolean",
          "description": "Specify true to set item as public"
        },
        "DataSetMappingInfo": {
          "type": "array",
          "description": "Dataset mapping information",
          "items": {
            "$ref": "#/definitions/DataSetMappingInfoV5"
          }
        },
        "DataSourceMappingInfo": {
          "type": "array",
          "description": "Datasource mapping information",
          "items": {
            "$ref": "#/definitions/DataSourceMappingInfoV5"
          }
        },
        "ItemContent": {
          "type": "string",
          "description": "Provide items in an array of bytes",
          "format": "byte"
        }
      }
    },
    "ApiReportDataSourceUpdateV5": {
      "type": "object",
      "description": "Datasource details",
      "required": [
        "ItemId"
      ],
      "properties": {
        "ItemId": {
          "type": "string",
          "description": "Item ID",
          "format": "guid"
        },
        "DataSourceName": {
          "type": "string",
          "description": "Current Datasource name"
        },
        "Name": {
          "type": "string",
          "description": "Updating Datasource name"
        },
        "Description": {
          "type": "string",
          "description": "Datasource description"
        },
        "VersionComment": {
          "type": "string",
          "description": "Comments about update"
        },
        "DataSourceDefinition": {
          "description": "Datasource definition",
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceDefinition"
            }
          ]
        }
      }
    },
    "ApiReportDataSetUpdateV5": {
      "type": "object",
      "description": "Dataset details",
      "required": [
        "ItemId"
      ],
      "properties": {
        "ItemId": {
          "type": "string",
          "description": "Item ID",
          "format": "guid"
        },
        "DataSetName": {
          "type": "string",
          "description": "Dataset name"
        },
        "Name": {
          "type": "string",
          "description": "Dataset name"
        },
        "Description": {
          "type": "string",
          "description": "Dataset description"
        },
        "VersionComment": {
          "type": "string",
          "description": "Comments about update"
        },
        "DataSourceMappingInfo": {
          "type": "array",
          "description": "Datasource mapping information",
          "items": {
            "$ref": "#/definitions/DataSourceMappingInfoV5"
          }
        },
        "ItemContent": {
          "type": "string",
          "description": "Provide items in an array of bytes",
          "format": "byte"
        }
      }
    },
    "ApiItemDetail": {
      "type": "object",
      "description": "Item details",
      "required": [
        "CanRead",
        "CanWrite",
        "CanDelete",
        "CanDownload",
        "CanSchedule",
        "CanOpen",
        "CanMove",
        "CanCopy",
        "CanClone",
        "CanCreateItem",
        "Id",
        "ItemType",
        "CreatedById",
        "ModifiedById",
        "ItemModifiedDate",
        "ItemCreatedDate",
        "ReportId"
      ],
      "properties": {
        "CanRead": {
          "type": "boolean",
          "description": "Specifies the read permission of the item"
        },
        "CanWrite": {
          "type": "boolean",
          "description": "Specifies the write permission of the item"
        },
        "CanDelete": {
          "type": "boolean",
          "description": "Specifies the delete permission of the item"
        },
        "CanDownload": {
          "type": "boolean",
          "description": "Specifies the download permission of the item"
        },
        "CanSchedule": {
          "type": "boolean",
          "description": "Specifies the schedule permission of the item"
        },
        "CanOpen": {
          "type": "boolean",
          "description": "Specifies the open permission of the item"
        },
        "CanMove": {
          "type": "boolean",
          "description": "Specifies the move permission of the item"
        },
        "CanCopy": {
          "type": "boolean",
          "description": "Specifies the copy permission of the item"
        },
        "CanClone": {
          "type": "boolean",
          "description": "Specifies the clone permission of the item"
        },
        "CanCreateItem": {
          "type": "boolean",
          "description": "Specifies the create permission of the item"
        },
        "Id": {
          "type": "string",
          "description": "Item ID",
          "format": "guid"
        },
        "ItemType": {
          "description": "Item type",
          "allOf": [
            {
              "$ref": "#/definitions/ItemType"
            }
          ]
        },
        "Name": {
          "type": "string",
          "description": "Item name"
        },
        "Description": {
          "type": "string",
          "description": "Item description"
        },
        "ItemLocation": {
          "type": "string",
          "description": "Item location"
        },
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator",
          "format": "int32"
        },
        "CreatedByDisplayName": {
          "type": "string",
          "description": "Specifies the display name of the user who created the item"
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier",
          "format": "int32"
        },
        "ModifiedByFullName": {
          "type": "string",
          "description": "Specifies the full name of the user who modified the item"
        },
        "CategoryId": {
          "type": "string",
          "description": "Category ID",
          "format": "guid"
        },
        "CategoryName": {
          "type": "string",
          "description": "Category name"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in string format"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in string format"
        },
        "ItemModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format",
          "format": "date-time"
        },
        "ItemCreatedDate": {
          "type": "string",
          "description": "Date created of item in date format",
          "format": "date-time"
        },
        "ReportId": {
          "type": "string",
          "format": "guid"
        },
        "ReportName": {
          "type": "string"
        }
      }
    },
    "ItemType": {
      "type": "integer",
      "description": "Item type",
      "x-enumNames": [
        "None",
        "Category",
        "Dashboard",
        "Report",
        "Datasource",
        "Dataset",
        "File",
        "Schedule",
        "Widget",
        "ItemView",
        "Slideshow"
      ],
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "ItemDownloadResponse": {
      "type": "object",
      "required": [
        "Status"
      ],
      "properties": {
        "FileContent": {
          "type": "string",
          "description": "Declare a File Content property of type array of byte.",
          "format": "byte"
        },
        "ItemName": {
          "type": "string",
          "description": "Declare a Item Name property of type string."
        },
        "Extension": {
          "type": "string",
          "description": "Declare a Extension property of type string."
        },
        "Status": {
          "type": "boolean",
          "description": "Declare a Status property of type bool."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Declare a Status Message property of type string."
        }
      }
    },
    "ApiScheduleResponse": {
      "type": "object",
      "description": "Response Details of schedules created.",
      "required": [
        "ScheduleId"
      ],
      "properties": {
        "ScheduleName": {
          "type": "string",
          "description": "Returns the schedule name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Returns the schedule ID.",
          "format": "guid"
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "ScheduleType": {
          "type": "string",
          "description": "Returns the schedule type."
        },
        "NextRun": {
          "type": "string",
          "description": "Returns the schedule’s next run."
        }
      }
    },
    "ApiScheduleRequest": {
      "type": "object",
      "description": "Details about the schedule passed will be added to the server.",
      "required": [
        "Name",
        "ItemId",
        "ExportType",
        "StartTime",
        "NeverEnd",
        "EndAfterOccurrence",
        "ScheduleType",
        "Enabled"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "Description": {
          "type": "string",
          "description": "File description"
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the Item"
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Html` `Pdf` `Word` `PPT` `CSV` `XML`."
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "Sets the schedule with no end when specified as true. \\n\\n Note: By default, the NeverEnd is set to true. To set the end time for schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise it remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \\n\\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`. \\n\\n For example: If you provide the end date-time, the schedule will end when the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the report. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \\n\\n Note: If you chose the schedule type as `Monthly`, provide a values to the MonthlySchedule property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) properties empty."
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        },
        "Enabled": {
          "type": "boolean",
          "description": "If True, Schedule is active."
        },
        "ReportParameter": {
          "type": "array",
          "description": "Specify the schedule parameter",
          "items": {
            "$ref": "#/definitions/ApiReportParameter"
          }
        }
      }
    },
    "ApiHourlySchedule": {
      "type": "object",
      "description": "Runs the schedules on an hourly basis.",
      "required": [
        "ScheduleInterval"
      ],
      "properties": {
        "ScheduleInterval": {
          "type": "string",
          "description": "Specifies the hour interval. Based on this interval the schedule will run continuously until the end time. The format should be `HH:mm`."
        }
      }
    },
    "ApiDailySchedule": {
      "type": "object",
      "description": "Runs the schedules on a daily basis. \n            ",
      "required": [
        "RecurrenceType",
        "EveryNdays",
        "EveryWeekday"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs every day or every working day.  Valid values: `EveryNdays` `EveryWeekday`. \\n\\n Note: If you chose the recurrence type as EveryNdays, provide a value to the EveryNdays property, and leave the (EveryWeekday) property empty."
        },
        "EveryNdays": {
          "type": "integer",
          "description": "Specifies the day interval the schedule recurs. \\n\\n For example: If you provide 2, the schedule recurs every 2 days.",
          "format": "int32"
        },
        "EveryWeekday": {
          "type": "boolean",
          "description": "For the schedule to recur every working day, set to true."
        }
      }
    },
    "ApiWeeklySchedule": {
      "type": "object",
      "description": "Runs the schedule on a weekly basis.",
      "required": [
        "RecurrenceWeeks",
        "RecurrenceDays"
      ],
      "properties": {
        "RecurrenceWeeks": {
          "type": "integer",
          "description": "Specifies the number of weeks the schedule recurs. \\n\\n For example: If you provide 2, the schedule will recur every 2 weeks.  ",
          "format": "int32"
        },
        "RecurrenceDays": {
          "type": "array",
          "description": "Specifies the list of  days the schedule recurs. Valid values `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \\n\\n For example: If you provide `Sunday`, the schedule will recur sunday's of every 2 weeks.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiMonthlySchedule": {
      "type": "object",
      "description": "Runs the schedule on a monthly basis.",
      "required": [
        "RecurrenceType"
      ],
      "properties": {
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a specific day or on the customized day basis. Valid values: `DayRecurrence` `CustomRecurrence` \\n\\n Note: If you chose the recurrence type as DayRecurrence, provide a value to the DayRecurrence property and leave the (CustomRecurrence) property empty."
        },
        "DayRecurrence": {
          "description": "The schedule recurs on the day specified on the month interval.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlyScheduleDayRecurrence"
            }
          ]
        },
        "CustomRecurrence": {
          "description": "The schedule recurs on the customized day of the specified month interval.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlyScheduleCustomRecurrence"
            }
          ]
        }
      }
    },
    "ApiMonthlyScheduleDayRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the day specified on the month interval.",
      "required": [
        "DayInterval",
        "MonthInterval"
      ],
      "properties": {
        "DayInterval": {
          "type": "integer",
          "description": "Specifies the number of day interval the schedule recurs. \\n\\n For example: If you provide 10, the schedule will recur every 10th day. ",
          "format": "int32"
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \\n\\n For example: If you provide 3, the schedule will recur 10th day of every 3 months.",
          "format": "int32"
        }
      }
    },
    "ApiMonthlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the customized day of the specified month interval.",
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthInterval"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs. Valid values: `first` `second` `third` `fourth` `last`. \\n\\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of the week the schedule recurs. Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`. \\n\\n For example: If you provide Sunday, the schedule will recur on the second week of sunday."
        },
        "MonthInterval": {
          "type": "integer",
          "description": "Specifies the number of month interval the schedule recurs. \\n\\n For example: If you provide 5, the schedule will recur second week of sunday's of every 5 months.",
          "format": "int32"
        }
      }
    },
    "ApiYearlySchedule": {
      "type": "object",
      "description": "Runs the schedules on a yearly basis.",
      "required": [
        "YearInterval",
        "RecurrenceType"
      ],
      "properties": {
        "YearInterval": {
          "type": "integer",
          "description": "Specifies the number of years the schedule recurs. \\n\\n For example: If you provide 5, the schedule will recur every 5 years.",
          "format": "int32"
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type, whether the schedule recurs on a month basis or on the customized month basis. Valid values: `MonthRecurrence` `CustomRecurrence`. \\n\\n Note: If you chose the recurrence type as MonthRecurrence, provide a value to the MonthRecurrence property, and leave the (CustomRecurrence) property empty."
        },
        "MonthRecurrence": {
          "description": "The schedule recurs on the month and number of years specified in YearInterval property.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlyScheduleMonthRecurrence"
            }
          ]
        },
        "CustomRecurrence": {
          "description": "The schedule recurs in the customized month based on the number of years provided in the YearInterval property.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlyScheduleCustomRecurrence"
            }
          ]
        }
      }
    },
    "ApiYearlyScheduleMonthRecurrence": {
      "type": "object",
      "description": "The schedule recurs on the month and number of years specified in YearInterval property.",
      "required": [
        "MonthOfYear",
        "DayOfMonth"
      ],
      "properties": {
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs. Valid values: `January` `February` `March` `April` `May` `June` `July` `August` `September` `October` `November` `December`. \\n\\n For example: If you provide April, the schedule will recur in April of every year. Here the (year) is the value provided in the YearInterval property."
        },
        "DayOfMonth": {
          "type": "integer",
          "description": "Specifies the day of the month the schedule recurs. \\n\\n For example: If you provide 20, the schedule will recur 20th April of every year.  Here the (year) is the value provided in the YearInterval property.",
          "format": "int32"
        }
      }
    },
    "ApiYearlyScheduleCustomRecurrence": {
      "type": "object",
      "description": "The schedule recurs in the customized month based on the number of years provided in the YearInterval property.",
      "required": [
        "WeekOfMonth",
        "DayOfWeek",
        "MonthOfYear"
      ],
      "properties": {
        "WeekOfMonth": {
          "type": "string",
          "description": "Specifies the week of the month the schedule recurs. Valid values: `first` `second` `third` `fourth` `last`. \\n\\n For example: If you provide second, the schedule will recur on the second week."
        },
        "DayOfWeek": {
          "type": "string",
          "description": "Specifies the day of week the schedule recurs. Valid values: `day` `weekday` `weekendday` `Sunday` `Monday` `Tuesday` `Wednesday` `Thursday` `Friday` `Saturday`.\\n\\n For example: If you provide Sunday, the schedule will recur on every sunday's of the second week."
        },
        "MonthOfYear": {
          "type": "string",
          "description": "Specifies the month the schedule recurs.  Valid values: `January` `February` `March` `April` `May` `June` `July` `August` `September` `October` `November` `December`. \\n\\n For example: If you provide March, the schedule will recur on the sunday's of the second week of March every year. Here the (year) is the value provided in the YearInterval property."
        }
      }
    },
    "ApiReportParameter": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Parameter name"
        },
        "Values": {
          "type": "array",
          "description": "Parameter values. The Date parameters input values are validated based on the server culture. Valid formats for en-us culture as following: `mm/dd/yyyy` `yyyy/mm/dd` `dd/mmm/yyyy` `mmm/dd/yyyy` `yyyy/dd/mmm` `yyyy/mmm/dd`.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApiUpdateScheduleRequest": {
      "type": "object",
      "description": "Details about the schedule passed will be updated to the server.",
      "required": [
        "ItemId",
        "NeverEnd",
        "EndAfterOccurrence",
        "Enabled"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "Schedule name."
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the Item"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the export type to schedule the report. Valid values: `Excel` `Html` `Pdf` `Word` `PPT` `CSV` `XML`."
        },
        "Description": {
          "type": "string",
          "description": "File description"
        },
        "StartTime": {
          "type": "string",
          "description": "Specifies the UTC start date-time of schedule. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`."
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "Sets the schedule with no end when specified as true. \\n\\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \\n\\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the UTC end date-time of schedule after which schedule will be completed. The format should be ISO 8601 i.e. `yyyy-mm-ddTHH:mm:ssZ`. \\n\\n For example: If you provide the end date-time, the schedule will end once the end date-time is reached."
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "string"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "RemoveUserList": {
          "type": "array",
          "description": "Provides the list of email addresses or user IDs to remove recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "RemoveGroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to remove groups from the schedule subscriptions.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "RemoveExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email addresses to remove email recipients from the schedule subscriptions.",
          "items": {
            "type": "string"
          }
        },
        "ScheduleType": {
          "type": "string",
          "description": "Specifies the schedule type to schedule the report. Valid values: `Hourly` `Daily` `Weekly` `Monthly` `Yearly`. \\n\\n Note: If you chose the schedule type as `Monthly`, provide a values to the MonthlySchedule property, and leave the (HourlySchedule, DailySchedule, WeeklySchedule and YearlySchedule) property empty."
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        },
        "ExportFileSettingsInfo": {
          "type": "string",
          "description": "Export File settings information."
        },
        "Enabled": {
          "type": "boolean",
          "description": "If True, Schedule is active."
        },
        "ReportParameter": {
          "type": "array",
          "description": "Specify the schedule parameter",
          "items": {
            "$ref": "#/definitions/ApiReportParameter"
          }
        }
      }
    },
    "ApiScheduledItemDetail": {
      "type": "object",
      "required": [
        "CreatedById",
        "CreatedDate",
        "ExportTypeId",
        "IsActive",
        "IsEnabled",
        "ModifiedDate",
        "ModifiedById",
        "RecurrenceTypeId",
        "ReportId",
        "ScheduleId",
        "StartDate",
        "NeverEnd",
        "EndAfterOccurrence"
      ],
      "properties": {
        "CreatedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item creator.",
          "format": "int32"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "ExportType": {
          "type": "string",
          "description": "Specifies the report export type."
        },
        "EndDate": {
          "type": "string",
          "description": "Specifies the the end date of the schedule.",
          "format": "date-time"
        },
        "ExportTypeId": {
          "type": "integer",
          "description": "Specifies the export type id of schedule.",
          "format": "int32"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true, if the Schedule is active."
        },
        "IsEnabled": {
          "type": "boolean",
          "description": "Returns true, if the Schedule is enabled."
        },
        "ItemType": {
          "type": "string",
          "description": "Specifies the ItemType."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format": "int32"
        },
        "NextSchedule": {
          "type": "string",
          "description": "Specifies the Next scheduled date and time.",
          "format": "date-time"
        },
        "RecurrenceInfo": {
          "type": "string",
          "description": "Specifies the recurrence information of the schedule."
        },
        "RecurrenceTypeId": {
          "type": "integer",
          "description": "Specifies the recurrence Id of the schedule.",
          "format": "int32"
        },
        "RecurrenceType": {
          "type": "string",
          "description": "Specifies the recurrence type of the schedule."
        },
        "ReportId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        },
        "ReportName": {
          "type": "string",
          "description": "Item name."
        },
        "ScheduleId": {
          "type": "string",
          "description": "Schedule ID.",
          "format": "guid"
        },
        "ScheduleName": {
          "type": "string",
          "description": "Schedule name."
        },
        "StartDate": {
          "type": "string",
          "description": "Specifies the start date of the schedule.",
          "format": "date-time"
        },
        "NeverEnd": {
          "type": "boolean",
          "description": "Sets the schedule with no end when specified as true. \\n\\n Note: By default, the NeverEnd is set to true. To set the end time for the schedule, fill the properties of either EndAfterOccurrence or EndDate; otherwise remains empty."
        },
        "EndAfterOccurrence": {
          "type": "integer",
          "description": "Specifies the number of occurrences after which the schedule will be completed. \\n\\n For example: If you provide 5, the schedule will end after the completion of 5 occurrences.",
          "format": "int32"
        },
        "UserList": {
          "type": "array",
          "description": "Provides the list of username, email, or user IDs to the recipients who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "GroupList": {
          "type": "array",
          "description": "Provides the list of group IDs to the recipients in the group list who will get the schedules.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ExternalRecipientsList": {
          "type": "array",
          "description": "Provides the list of email IDs to the email recipients who will get the schedules. ",
          "items": {
            "type": "string"
          }
        },
        "HourlySchedule": {
          "description": "Runs the schedules on an hourly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiHourlySchedule"
            }
          ]
        },
        "DailySchedule": {
          "description": "Runs the schedules on a daily basis. ",
          "allOf": [
            {
              "$ref": "#/definitions/ApiDailySchedule"
            }
          ]
        },
        "WeeklySchedule": {
          "description": "Runs the schedule on a weekly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiWeeklySchedule"
            }
          ]
        },
        "MonthlySchedule": {
          "description": "Runs the schedule on a monthly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiMonthlySchedule"
            }
          ]
        },
        "YearlySchedule": {
          "description": "Runs the schedules on a yearly basis.",
          "allOf": [
            {
              "$ref": "#/definitions/ApiYearlySchedule"
            }
          ]
        },
        "ReportParameter": {
          "type": "array",
          "description": "Specify the schedule parameter",
          "items": {
            "$ref": "#/definitions/ApiReportParameter"
          }
        }
      }
    },
    "ApiUserPermissionDetail": {
      "type": "object",
      "description": "User permission details from the server.",
      "required": [
        "UserId",
        "PermissionId",
        "PermissionEntity",
        "PermissionAccess"
      ],
      "properties": {
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionAccess"
            }
          ]
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionEntity"
            }
          ]
        },
        "UserId": {
          "type": "integer",
          "description": "User ID.",
          "format": "int32"
        },
        "ItemName": {
          "type": "string",
          "description": "Item name."
        },
        "PermissionId": {
          "type": "integer",
          "description": "Permission ID.",
          "format": "int32"
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        }
      }
    },
    "PermissionAccess": {
      "type": "string",
      "description": "Specify an access type for item.",
      "x-enumNames": [
        "None",
        "Create",
        "Read",
        "ReadWrite",
        "ReadWriteDelete",
        "ReadDownload",
        "ReadWriteDownload",
        "ReadWriteDeleteDownload"
      ],
      "enum": [
        "None",
        "Create",
        "Read",
        "ReadWrite",
        "ReadWriteDelete",
        "ReadDownload",
        "ReadWriteDownload",
        "ReadWriteDeleteDownload"
      ]
    },
    "PermissionEntity": {
      "type": "string",
      "description": "Specify an entity of item for permission.",
      "x-enumNames": [
        "None",
        "AllReports",
        "ReportsInCategory",
        "SpecificReports",
        "AllCategories",
        "SpecificCategory",
        "AllDataSources",
        "SpecificDataSource",
        "AllFiles",
        "SpecificFile",
        "AllSchedules",
        "SpecificSchedule",
        "AllDashboards",
        "DashboardsInCategory",
        "SpecificDashboard",
        "AllWidgets",
        "SpecificWidget",
        "AllDatasets",
        "SpecificDataset",
        "SpecificItemView",
        "AllItemViews",
        "SpecificSlideshow",
        "AllSlideshow"
      ],
      "enum": [
        "None",
        "AllReports",
        "ReportsInCategory",
        "SpecificReports",
        "AllCategories",
        "SpecificCategory",
        "AllDataSources",
        "SpecificDataSource",
        "AllFiles",
        "SpecificFile",
        "AllSchedules",
        "SpecificSchedule",
        "AllDashboards",
        "DashboardsInCategory",
        "SpecificDashboard",
        "AllWidgets",
        "SpecificWidget",
        "AllDatasets",
        "SpecificDataset",
        "SpecificItemView",
        "AllItemViews",
        "SpecificSlideshow",
        "AllSlideshow"
      ]
    },
    "ApiGroupPermissionDetail": {
      "type": "object",
      "description": "Group Permission details from the server.",
      "required": [
        "GroupId",
        "PermissionId"
      ],
      "properties": {
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item."
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission."
        },
        "GroupId": {
          "type": "integer",
          "description": "Group ID.",
          "format": "int32"
        },
        "ItemName": {
          "type": "string",
          "description": "Item name."
        },
        "PermissionId": {
          "type": "integer",
          "description": "Permission ID.",
          "format": "int32"
        },
        "ItemId": {
          "type": "string",
          "description": "Item ID.",
          "format": "guid"
        }
      }
    },
    "ApiUserPermissionAdd": {
      "type": "object",
      "description": "Permission details.",
      "required": [
        "UserId"
      ],
      "properties": {
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionAccess"
            }
          ]
        },
        "UserId": {
          "type": "integer",
          "description": "User ID.",
          "format": "int32"
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionEntity"
            }
          ]
        },
        "ItemId": {
          "type": "string",
          "description": "Specify the item ID while assigning permission to particular item.",
          "format": "guid"
        }
      }
    },
    "ApiGroupPermissionAdd": {
      "type": "object",
      "description": "Permission details.",
      "required": [
        "GroupId"
      ],
      "properties": {
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionAccess"
            }
          ]
        },
        "GroupId": {
          "type": "integer",
          "description": "Group ID.",
          "format": "int32"
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionEntity"
            }
          ]
        },
        "ItemId": {
          "type": "string",
          "description": "Specify the item ID while assigning permission to particular item.",
          "format": "guid"
        }
      }
    },
    "ApiUserAdd": {
      "type": "object",
      "description": "User detail",
      "required": [
        "Email",
        "FirstName"
      ],
      "properties": {
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        },
        "Password": {
          "type": "string",
          "description": "Password of the user."
        }
      }
    },
    "ApiUserEdit": {
      "type": "object",
      "description": "User detail",
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        }
      }
    },
    "ApiUserDetail": {
      "type": "object",
      "description": "Detail of the User",
      "required": [
        "IsActive",
        "IsActiveDirectoryUser",
        "UserStatus",
        "UserId",
        "IsAzureAdUser"
      ],
      "properties": {
        "ContactNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "DisplayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "Email": {
          "type": "string",
          "description": "Email address of the user."
        },
        "FirstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the user is an active user."
        },
        "IsActiveDirectoryUser": {
          "type": "boolean",
          "description": "Returns true if the user is added from Active Directory"
        },
        "Lastname": {
          "type": "string",
          "description": "Last name of the user."
        },
        "UserStatus": {
          "description": "Returns the status of the user.",
          "allOf": [
            {
              "$ref": "#/definitions/UserStatus"
            }
          ]
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format": "int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "IsAzureAdUser": {
          "type": "boolean",
          "description": "Returns true if the user is added from Azure Active Directory."
        },
        "UserDomain": {
          "type": "string",
          "description": "Domain of the Active Directory User"
        },
        "Avatar": {
          "type": "string",
          "description": "Profile picture of the User",
          "format": "byte"
        }
      }
    },
    "ApiDownloadCsvTemplate": {
      "type": "object",
      "description": "Contains response of downloaded CSV template file.",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "FileContent": {
          "type": "string",
          "description": "Returns CSV file in array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiCsvUserImportResponse": {
      "type": "object",
      "description": "Contains response of Csv user import",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "CsvErrorContent": {
          "type": "string",
          "description": "Returns CSV file in array of bytes if the importing users find errors.",
          "format": "byte"
        }
      }
    },
    "ApiCsvUserImportRequest": {
      "type": "object",
      "description": "Contains CSV user import request.",
      "required": [
        "CsvFileContent"
      ],
      "properties": {
        "CsvFileContent": {
          "type": "string",
          "description": "Provides the CSV file in an array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiUserActivationRequest": {
      "type": "object",
      "description": "User activation or deactivation request",
      "required": [
        "Activate"
      ],
      "properties": {
        "Activate": {
          "type": "boolean",
          "description": "Status update for the user."
        }
      }
    },
    "ApiGroupList": {
      "type": "object",
      "properties": {
        "GroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiGroup"
          }
        }
      }
    },
    "ApiExportReport": {
      "type": "object",
      "description": "Details about the report to be exported",
      "required": [
        "ReportId",
        "ExportType"
      ],
      "properties": {
        "ReportId": {
          "type": "string",
          "description": "Report ID.",
          "format": "guid"
        },
        "ServerPath": {
          "type": "string",
          "description": "Specifies the relative URL of the report."
        },
        "ExportType": {
          "type": "string",
          "description": "Export type. Valid values: `\"Excel\"` `\"Html\"` `\"Pdf\"` `\"Word\"` `\"PPT\"` `\"CSV\"` `\"XML\"`"
        }
      }
    },
    "ApiExportReportResponse": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        },
        "FileContent": {
          "type": "string",
          "description": "Returns the exported report in an array of bytes.",
          "format": "byte"
        }
      }
    },
    "ApiDatasetMapping": {
      "type": "object",
      "description": "Returns the dataset mapping information like shared dataset id, shared dataset name and name of the dataset",
      "required": [
        "SharedDataSetId",
        "SharedDataSetName",
        "Name"
      ],
      "properties": {
        "SharedDataSetId": {
          "type": "string",
          "description": "Returns the shared dataset id of the report"
        },
        "SharedDataSetName": {
          "type": "string",
          "description": "Returns the shared dataset name of the report"
        },
        "Name": {
          "type": "string",
          "description": "Returns the name of the dataset"
        }
      }
    },
    "ApiDatasourceMapping": {
      "type": "object",
      "description": "Returns the datasource mapping information like shared datasource id, shared datasource name and name of the datasource",
      "required": [
        "SharedDataSourceId",
        "SharedDataSourceName",
        "Name"
      ],
      "properties": {
        "SharedDataSourceId": {
          "type": "string",
          "description": "Returns the shared datasource id of the report"
        },
        "SharedDataSourceName": {
          "type": "string",
          "description": "Returns the shared datasource name of the report"
        },
                "Name": {
          "type": "string",
          "description": "Returns the name of the datasource"
        }
      }
    },
    "ExportFilterParameters": {
      "type": "object",
      "description": "Filter Parameters details",
      "properties": {
        "FilterParameters": {
          "type": "string",
          "description": "Specify the filter parameter values to be applied in reports. The JSON for the different types of parameters includes, \n\n 1. For String parameter - {\"FilterParameters\":\"{\\'SalesOrderNumber':['SO50750']}\"} \n\n  2. For Integer parameter - {\"FilterParameters\":\"{\\'InvoiceID':['10252']}\"} \n\n 3. For Date parameter - {\"FilterParameters\":\"{\\'StartDate':['1/1/2003'],\\'EndDate':['1/31/2003']}\"} \n\n 4. For Boolean parameter - {\"FilterParameters\":\"{\\'ReportParameter1':['true']}\"} \n\n The Date parameters input values are validated based on the server culture. Valid formats for en-us culture as following: `mm/dd/yyyy` `yyyy/mm/dd` `dd/mmm/yyyy` `mmm/dd/yyyy` `yyyy/dd/mmm` `yyyy/mmm/dd`."
        }
      }
    },
    "ApiEmailEdit": {
      "type": "object",
      "description": "Email detail",
      "required": [
        "SMTPServer",
        "SMTPPort",
        "SenderName",
        "SenderEmailAddress",
        "AuthenticationType",
        "Username",
        "Password",
        "EnableSSL"
      ],
      "properties": {
        "SMTPServer": {
          "type": "string",
          "description": "SMTP server."
        },
        "SMTPPort": {
          "type": "string",
          "description": "SMTP port."
        },
        "SenderName": {
          "type": "string",
          "description": "Specifies the sender name of the user."
        },
        "SenderEmailAddress": {
          "type": "string",
          "description": "Email address of the user."
        },
        "AuthenticationType": {
          "type": "string",
          "description": "Authentication type. Vaild values: `\"Basic\"` `\"Anonymous\"`."
        },
         "Username": {
          "type": "string",
          "description": "Username of the user."
        },
         "Password": {
          "type": "string",
          "description": "Password of the user."
        },
        "EnableSSL": {
          "type": "boolean",
          "description": "Enable SSL."
        }
      }
    },
    "ApiResponseEmail": {
      "type": "object",
      "required": [
        "ApiStatus",
        "Status"
      ],
      "properties": {
        "ApiStatus": {
          "type": "boolean",
          "description": "Returns the status of the API."
        },
        "Status": {
          "type": "boolean",
          "description": "Returns status of the API request."
        },
        "StatusMessage": {
          "type": "string",
          "description": "Returns the status message from the API."
        }
      }
    },
    "ActivityLogResponseList":{
      "type": "array",
      "description": "Activity Log Response List",
      "items": {
        "$ref": "#/definitions/ActivityLogResponse"
      }
    },
    "ActivityLogResponse":{
      "type": "object",
      "description": "Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "ActivityModule": {
          "type": "string",
          "description": "Name of the module in which the activity performed."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "OldValue": {
          "type": "string",
          "description": "Specifies the value before update."
        },
        "NewValue": {
          "type": "string",
          "description": "Specifies the value after update."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "GroupId": {
          "type": "integer",
          "description": "ID of the group.",
          "format":"int32"
        },
        "GroupName": {
          "type": "string",
          "description": "Name of the group."
        },
        "SourceTypeId": {
          "type": "integer",
          "description": "Specifies the enum value of the source type.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "SourceType": {
          "type": "string",
          "description": "Specifies the source type.",
          "enum":[
            "Web",
            "API",
            "Schedule"
          ]
        },
        "ActivityStatusId": {
          "type": "integer",
          "description": "Specifies the enum value of the activity status.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "ActivityStatus": {
          "type": "string",
          "description": "Status of the activity.",
          "enum":[
            "Start",
            "Success",
            "Fail"
          ]
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format":"int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "GroupPermissionId": {
          "type": "integer",
          "description": "Specifies the ID of the group permission.",
          "format":"int32"
        },
        "CommentId": {
          "type": "integer",
          "description": "ID of the comment.",
          "format":"int32"
        },
        "Url": {
          "type": "string",
          "description": "Specifies the URL of the report."
        },
        "ParentCommentId": {
          "type": "integer",
          "description": "ID of the comment which is replied.",
          "format":"int32"
        },
        "NotificationTo": {
          "type": "integer",
          "description": "ID of the user who receives notification.",
          "format":"int32"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "IsRead": {
          "type": "boolean",
          "description": "Returns true if comment was read."
        },
        "ItemId": {
          "type": "string",
          "description": "Id of the item.",
          "format":"guid"
        },
        "ItemName": {
          "type": "string",
          "description": "Name of the item."
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the item."
        },
        "ItemVersionId": {
          "type": "string",
          "description": "Specifies the version ID of the item."
        },
        "ParentId": {
          "type": "string",
          "description": "Specifies the category ID."
        },
        "CategoryName": {
          "type": "string",
          "description": "Specifies the category name."
        },
        "FromCategoryId": {
          "type": "string",
          "description": "Specifies the source category ID."
        },
        "FromCategoryName": {
          "type": "string",
          "description": "Specifies the source category name."
        },
        "ToCategoryId": {
          "type": "string",
          "description": "Specifies the destination category ID."
        },
        "ToCategoryName": {
          "type": "string",
          "description": "Specifies the destination category name."
        },
        "UserPermissionId": {
          "type": "string",
          "description": "Specifies the ID of the user permission."
        },
        "ExecutedDate": {
          "type": "string",
          "description": "Schedule executed date in date format.",
          "format": "date-time"
        },
        "IsOnDemand": {
          "type": "string",
          "description": "Returns true if schedule is on-demand."
        },
        "Description": {
          "type": "string",
          "description": "Specifies the description of the item."
        },
        "ScheduleName": {
          "type": "string",
          "description": "Name of the schedule."
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission."
        },
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item."
        },
        "ActivityLogInfo": {
          "type": "object",
          "description": "Report Execution Information",
          "properties":{
            "TimeStart": {
              "type": "string",
              "description": "Date-Time at which the report starts to render.",
              "format": "date-time"
            },
            "TimeEnd": {
              "type": "string",
              "description": "Date-Time at which the report stops to render.",
              "format": "date-time"
            },
            "TimeDataRetrieval": {
              "type": "integer",
              "description": "Data retrieval time in milliseconds.",
              "format":"int32"
            },
            "TimeProcessing": {
              "type": "integer",
              "description": "Data processing time in milliseconds.",
              "format":"int32"
            },
            "RowCount": {
              "type": "integer",
              "description": "Specifies the number of rows retrieved.",
              "format":"int32"
            }
          }
        }
      }
    },
    "GroupActivityLogResponseList":{
      "type": "array",
      "description": "Group Activity Log Response List",
      "items": {
        "$ref": "#/definitions/GroupActivityLogResponse"
      }
    },
    "GroupActivityLogResponse":{
      "type": "object",
      "description": "Group Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "OldValue": {
          "type": "string",
          "description": "Specifies the value before update."
        },
        "NewValue": {
          "type": "string",
          "description": "Specifies the value after update."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "GroupId": {
          "type": "integer",
          "description": "ID of the group.",
          "format":"int32"
        },
        "GroupName": {
          "type": "string",
          "description": "Name of the group."
        },
        "SourceTypeId": {
          "type": "integer",
          "description": "Specifies the enum value of the source type.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "SourceType": {
          "type": "string",
          "description": "Specifies the source type.",
          "enum":[
            "Web",
            "API",
            "Schedule"
          ]
        },
        "ActivityStatusId": {
          "type": "integer",
          "description": "Specifies the enum value of the activity status.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "ActivityStatus": {
          "type": "string",
          "description": "Status of the activity.",
          "enum":[
            "Start",
            "Success",
            "Fail"
          ]
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "Description": {
          "type": "string",
          "description": "Specifies the description of the item."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        }
      }
    },
    "GroupPermissionActivityLogResponseList":{
      "type": "array",
      "description": "Group Permission Activity Log Response List",
      "items": {
        "$ref": "#/definitions/GroupPermissionActivityLogResponse"
      }
    },
    "GroupPermissionActivityLogResponse":{
      "type": "object",
      "description": "Group Permission Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "GroupId": {
          "type": "integer",
          "description": "ID of the group.",
          "format":"int32"
        },
        "GroupName": {
          "type": "string",
          "description": "Name of the group."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "GroupPermissionId": {
          "type": "integer",
          "description": "Specifies the ID of the group permission.",
          "format":"int32"
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission."
        },
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item."
        }
      }
    },
    "UserActivityLogResponseList":{
      "type": "array",
      "description": "User Activity Log Response List",
      "items": {
        "$ref": "#/definitions/UserActivityLogResponse"
      }
    },
    "UserActivityLogResponse":{
      "type": "object",
      "description": "User Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "OldValue": {
          "type": "string",
          "description": "Specifies the value before update."
        },
        "NewValue": {
          "type": "string",
          "description": "Specifies the value after update."
        },
        "ActivityStatusId": {
          "type": "integer",
          "description": "Specifies the enum value of the activity status.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "ActivityStatus": {
          "type": "string",
          "description": "Status of the activity.",
          "enum":[
            "Start",
            "Success",
            "Fail"
          ]
        },
        "SourceTypeId": {
          "type": "integer",
          "description": "Specifies the enum value of the source type.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "SourceType": {
          "type": "string",
          "description": "Specifies the source type.",
          "enum":[
            "Web",
            "API",
            "Schedule"
          ]
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format":"int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "Description": {
          "type": "string",
          "description": "Specifies the description of the item."
        }
      }
    },
    "UserPermissionActivityLogResponseList":{
      "type": "array",
      "description": "User Permission Activity Log Response List",
      "items": {
        "$ref": "#/definitions/UserPermissionActivityLogResponse"
      }
    },
    "UserPermissionActivityLogResponse":{
      "type": "object",
      "description": "User Permission Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "UserPermissionId": {
          "type": "string",
          "description": "Specifies the ID of the user permission."
        },
        "ItemId": {
          "type": "string",
          "description": "Id of the item.",
          "format":"guid"
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "UserId": {
          "type": "integer",
          "description": "ID of the user.",
          "format":"int32"
        },
        "Username": {
          "type": "string",
          "description": "Username of the user."
        },
        "PermissionEntity": {
          "type": "string",
          "description": "Specify an entity of item for permission."
        },
        "PermissionAccess": {
          "type": "string",
          "description": "Specify an access type for item."
        }
      }
    },
    "CommentActivityLogResponseList":{
      "type": "array",
      "description": "Comment Activity Log Response List",
      "items": {
        "$ref": "#/definitions/CommentActivityLogResponse"
      }
    },
    "CommentActivityLogResponse":{
      "type": "object",
      "description": "Comment Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "CommentId": {
          "type": "integer",
          "description": "ID of the comment.",
          "format":"int32"
        },
        "Url": {
          "type": "string",
          "description": "Specifies the URL of the report."
        },
        "ParentCommentId": {
          "type": "integer",
          "description": "ID of the comment which is replied.",
          "format":"int32"
        },
        "NotificationTo": {
          "type": "integer",
          "description": "ID of the user who receives notification.",
          "format":"int32"
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "IsRead": {
          "type": "boolean",
          "description": "Returns true if comment was read."
        },
        "Description": {
          "type": "string",
          "description": "Specifies the description of the item."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        }
      }
    },
    "ScheduleActivityLogResponseList":{
      "type": "array",
      "description": "Schedule Activity Log Response List",
      "items": {
        "$ref": "#/definitions/ScheduleActivityLogResponse"
      }
    },
    "ScheduleActivityLogResponse":{
      "type": "object",
      "description": "Schedule Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the item."
        },
        "ItemId": {
          "type": "string",
          "description": "Id of the item.",
          "format":"guid"
        },
        "ExecutedDate": {
          "type": "string",
          "description": "Schedule executed date in date format.",
          "format": "date-time"
        },
        "IsOnDemand": {
          "type": "string",
          "description": "Returns true if schedule is on-demand."
        },
        "Description": {
          "type": "string",
          "description": "Specifies the description of the item."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "ScheduleName": {
          "type": "string",
          "description": "Name of the schedule."
        }
      }
    },
    "SystemActivityLogResponseList":{
      "type": "array",
      "description": "System Settings Activity Log Response List",
      "items": {
        "$ref": "#/definitions/SystemActivityLogResponse"
      }
    },
    "SystemActivityLogResponse":{
      "type": "object",
      "description": "System Settings Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "OldValue": {
          "type": "string",
          "description": "Specifies the value before update."
        },
        "NewValue": {
          "type": "string",
          "description": "Specifies the value after update."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "ActivityStatusId": {
          "type": "integer",
          "description": "Specifies the enum value of the activity status.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "ActivityStatus": {
          "type": "string",
          "description": "Status of the activity.",
          "enum":[
            "Start",
            "Success",
            "Fail"
          ]
        },
        "Description": {
          "type": "string",
          "description": "Specifies the description of the item."
        },
        "CreatedDate": {
          "type": "string",
          "description": "Date created of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        }
      }
    },
    "ItemActivityLogResponseList":{
      "type": "array",
      "description": "Item Activity Log Response List",
      "items": {
        "$ref": "#/definitions/ItemActivityLogResponse"
      }
    },
    "ItemActivityLogResponse":{
      "type": "object",
      "description": "Item Activity Log Response",
      "properties": {
        "Id": {
          "type": "string",
          "description": "ID of the activity."
        },
        "Activity": {
          "type": "string",
          "description": "Type of activity which is performed."
        },
        "ModifiedById": {
          "type": "integer",
          "description": "Specifies the user ID of the item modifier.",
          "format":"int32"
        },
        "ModifiedBy": {
          "type": "string",
          "description": "Specifies the user name of the item modifier."
        },
        "SourceTypeId": {
          "type": "integer",
          "description": "Specifies the enum value of the source type.",
          "enum":[
            1,
            2,
            3
          ]
        },
        "SourceType": {
          "type": "string",
          "description": "Specifies the source type.",
          "enum":[
            "Web",
            "API",
            "Schedule"
          ]
        },
        "ItemId": {
          "type": "string",
          "description": "Id of the item.",
          "format":"guid"
        },
        "ItemName": {
          "type": "string",
          "description": "Name of the item."
        },
        "ItemType": {
          "type": "string",
          "description": "Type of the item."
        },
        "ItemVersionId": {
          "type": "string",
          "description": "Specifies the version ID of the item."
        },
        "ParentId": {
          "type": "string",
          "description": "Specifies the category ID."
        },
        "CategoryName": {
          "type": "string",
          "description": "Specifies the category name."
        },
        "FromCategoryId": {
          "type": "string",
          "description": "Specifies the source category ID."
        },
        "FromCategoryName": {
          "type": "string",
          "description": "Specifies the source category name."
        },
        "ToCategoryId": {
          "type": "string",
          "description": "Specifies the destination category ID."
        },
        "ToCategoryName": {
          "type": "string",
          "description": "Specifies the destination category name."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "Date modified of item in date format.",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Returns true if the item is active."
        },
        "ActivityLogInfo": {
          "type": "object",
          "description": "Report Execution Information",
          "properties":{
            "TimeStart": {
              "type": "string",
              "description": "Date-Time at which the report starts to render.",
              "format": "date-time"
            },
            "TimeEnd": {
              "type": "string",
              "description": "Date-Time at which the report stops to render.",
              "format": "date-time"
            },
            "TimeDataRetrieval": {
              "type": "integer",
              "description": "Data retrieval time in milliseconds.",
              "format":"int32"
            },
            "TimeProcessing": {
              "type": "integer",
              "description": "Data processing time in milliseconds.",
              "format":"int32"
            },
            "RowCount": {
              "type": "integer",
              "description": "Specifies the number of rows retrieved.",
              "format":"int32"
            }
          }
        }
      }
    }
 },
 "parameters": {},
    "responses": {},
    "securityDefinitions": {},
  "components": {
    "schemas": {
		"Response": {
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "description": "Type of token assigned by the authorization server."
          },
          "access_token": {
            "type": "string",
            "description": "Authentication token of the client."
          },
          "expires_in": {
            "type": "string",
            "description": "The lifetime in seconds of the access token."
          },
          "clientId": {
            "type": "string",
            "description": "Client ID of the internal app."
          },
          "TenantStatus": {
            "type": "string",
            "description": "Status of the client."
          },
          ".confidentiality_level": {
            "type": "string",
            "description": "Level of token confidentiality."
          },
          ".issued": {
            "type": "string",
            "description": "Authorization token issued date/time."
          },
          ".expires": {
            "type": "string",
            "description": "Authorization token expires on date/time."
          }
        },
        "x-typeName": "Response"
      },
       "Authentication": {
		   "type": "object",
        "required": [
          "grant_type",
          "client_id",
          "client_secret"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "The type of credentials used to authorize the request for an access token.<br />Value allowed is <code>client_credentials</code>",
            "nullable": false
          },
          "client_id": {
            "type": "string",
            "description": "Client ID of the internal app.",
            "nullable": false
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret of the internal app.",
            "nullable": false
          }
        }
      },
	  "Startup": {
        "type": "object",
        "description": "Startup Configuration object details.",
        "additionalProperties": false,
        "properties": {
          "ServerConfiguration": {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          "UmsConfiguration": {
            "$ref": "#/components/schemas/UmsConfiguration"
          },
          "DataStoreConfiguration": {
            "$ref": "#/components/schemas/DataStoreConfiguration"
          }
        }
      },
	  "ServerConfiguration": {
        "type": "object",
        "description": "Site configuration data.",
        "additionalProperties": false,
        "required": [
          "Database",
          "Storage",
          "Site"
        ],
        "properties": {
          "Database": {
            "$ref": "#/components/schemas/Database"
          },
          "Storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "Site": {
            "$ref": "#/components/schemas/Site"
          }
        }
      },
	  "Database": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
          "ServerType"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](https://staginghelp.boldbi.com/embedded-bi/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether the <code>DatabaseName</code> is new or existing."
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
          "ServerType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          }
        }
      },
	  "Storage": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "StorageType"
        ],
        "properties": {
          "StorageType": {
            "description": "Storage type.",
            "$ref": "#/components/schemas/StorageType"
          },
          "AzureBlob": {
            "description": "Azure Blob data.",
            "$ref": "#/components/schemas/AzureBlob"
          }
        }
      },
      "StorageType": {
		  "description": "0 - FileStorage, 1 - AzureBlob",
        "type": "enum",
        "enum": [
          0,
          1
        ],
        "x-enumNames": [
          "FileStorage",
          "AzureBlob"
        ]
      },
      "DatabaseType": {
		   "description": "0 - MSSQL, 1 - MySQL,2-PostgreSQL",
        "type": "enum",
        "enum": [
          0,
          1,
          2
        ],
        "x-enumNames": [
          "MSSQL",
          "MySQL",
          "PostgreSQL"
        ]
      },
      "TenantType": {
		  "description": "3 - BoldBIOnPremise, 4 - BoldReportsOnPremise",
        "type": "enum",
        "enum": [
          3,
          4
        ],
        "x-enumNames": [
          "BoldBIOnPremise",
          "BoldReportsOnPremise"
        ]
      },
      "AzureBlob": {
        "type": "object",
        "description": "Required only if the storage type is <code>AzureBlob</code>",
        "additionalProperties": false,
        "required": [
          "AzureBlobStorageContainerName",
          "AzureBlobStorageUri",
          "AccountName",
          "AccessKey"
        ],
        "properties": {
          "AzureBlobStorageContainerName": {
            "type": "string",
            "description": "Azure Blob storage container Name."
          },
          "AzureBlobStorageUri": {
            "type": "string",
            "description": "Azure Blob storage URI."
          },
          "ConnectionString": {
            "type": "string",
            "description": "Connection string of the blob."
          },
          "ConnectionType": {
            "type": "string",
            "description": "Connection type.<ul><li><code>http</code></li><li><code>https</code></li></ul>"
          },
          "AccountName": {
            "type": "string",
            "description": "Account name of the blob."
          },
          "AccessKey": {
            "type": "string",
            "description": "Access key of the blob"
          }
        }
      },
      "Site": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "TenantName",
          "TenantIdentifier",
          "TenantType"
        ],
        "properties": {
          "TenantName": {
            "type": "string",
            "description": "Name of the site."
          },
          "TenantIdentifier": {
            "type": "string",
            "description": "Identifier of the site."
          },
          "UseSiteIdentifier": {
            "type": "boolean",
            "description": "Decides to Use Site Identifier or not."
          },
          "TenantType": {
            "description": "Tenant type of the site.",
            "$ref": "#/components/schemas/TenantType"
          },
          "UseCustomBranding": {
            "type": "boolean",
            "description": "Decides to use branding details from ID."
          },
          "CustomAttribute": {
            "type": "array",
            "description": "Custom site attributes.",
            "items": {
            "$ref": "#/components/schemas/CustomAttribute"
          }
          },
          "TenantIsolation": {
            "description": "Tenant isolation code.",
            "$ref": "#/components/schemas/TenantIsolation"
          }
        }
      },
	  "CustomAttribute": {
        "type": "object",
        "required": [
          "Name",
          "Value",
          "Description",
          "CanEncrypt"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the site attribute."
          },
          "Value": {
            "type": "string",
            "description": "Value for the site attribute."
          },
          "Description": {
            "type": "string",
            "description": "Description of the attribute."
          },
          "CanEncrypt": {
            "type": "boolean",
            "description": "Decides to encrypt the site attribute data."
          }
        }
      },
	  "TenantIsolation": {
        "type": "object",
        "additionalProperties": false,
        "description": "Tenant isolation code.",
        "properties": {
          "IsEnabled": {
            "type": "boolean",
            "description": "Enable or disable the Isolation Code."
          },
          "IsolationCode": {
            "type": "string",
            "description": "Isolation code."
          }
        }
      },
	  "User": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Email",
          "FirstName",
          "UserName",
          "LastName",
          "Password"
        ],
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "UserName": {
            "type": "string",
            "description": "Username."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "Password": {
            "type": "string",
            "description": "Password of the user. <br /><blockquote>Note: Password must meet the following requirements. It must contain,</blockquote><ul><li><code>At least 6 characters</code></li><li><code>1 uppercase character</code></li><li><code>1 lowercase character</code></li><li><code>1 numeric character</code></li><li><code>1 special character</code></li></ul>"
          }
        }
      },
	  "UmsConfiguration": {
        "type": "object",
        "description": "Site administration configuration data.",
        "additionalProperties": false,
        "required": [
          "Database",
          "Storage",
          "User",
          "Unlockkey"
        ],
        "properties": {
          "Database": {
            "$ref": "#/components/schemas/Database"
          },
          "Storage": {
            "$ref": "#/components/schemas/Storage"
          },
          "User": {
            "$ref": "#/components/schemas/User"
          },
          "Unlockkey": {
            "type": "string",
            "description": "Unlockkey of the bold licese."
          }
        }
      },
	  "ApiResponse": {
        "required": [
          "ApiStatus",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ApiStatus": {
            "type": "boolean",
            "description": "Returns the status of the API."
          },
          "Data": {
            "type": "object",
            "description": "Returns data from the API."
          },
          "Status": {
            "type": "boolean",
            "description": "Returns status of the API request."
          },
          "StatusMessage": {
            "type": "string",
            "description": "Returns the status message from the API."
          },
          "Message": {
            "type": "string",
            "description": "Returns the message from the API."
          }
        }
      },
	  "AddTenantV1": {
        "type": "object",
        "description": "site detail",
        "additionalProperties": false,
        "required": [
          "DatabaseType",
          "DbConnectionString",
          "EmailDomain",
          "TenantName",
          "TenantIdentifier",
          "TenantType",
          "StorageType"
        ],
        "properties": {
          "DatabaseType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          },
          "DbConnectionString": {
            "type": "string",
            "description": "Database connection string of the server.<ul><li>MSSQL - Data Source=;Initial Catalog=;User ID=;Password=;Encrypt=False</li><li>Postgre SQL - Host=;Port=5432;Database=;Username=;Password=;SSL Mode=Require</li><li>MySql - Server=;Database=;User Id=;Password=;SSL Mode=Required</li></ul>"
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Decides the data store database is new or existing."
          },
          "MaintenanceDataBase": {
            "type": "string",
            "description": "Maintenance dataBase of the database server."
          },
          "EmailDomain": {
            "type": "string",
            "description": "Email address of the user."
          },
          "TenantName": {
            "type": "string",
            "description": "Tenant name of the site."
          },
          "TenantIdentifier": {
            "type": "string",
            "description": "Tenant identifier of the site."
          },
          "TenantType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/TenantType"
          },
          "StorageType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/StorageType"
          },
          "DataStoreConfiguration": {
            "$ref": "#/components/schemas/DataStoreConfiguration"
          },
          "IsTenantIsolationCodeEnabled": {
            "type": "boolean",
            "default": "false",
            "description": "Enable or disable the Isolation Code."
          },
          "TenantIsolationCode": {
            "type": "string",
            "description": "Isolation code."
          },
          "CustomAttribute": {
            "type": "array",
            "description": "Custom site attributes.",
            "items": {
            "$ref": "#/components/schemas/CustomAttribute"
          }
          }
        }
      },
	  "DataStoreConfiguration": {
        "type": "object",
        "description": "Data store configuration of the site <blockquote>required to create <code>BoldBIOnPremise</code> tenants only.</blockquote>",
        "additionalProperties": false,
        "required": [
          "ServerName",
          "DatabaseName",
          "UserName",
          "Password",
          "ServerType"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of the database server."
          },
          "DatabaseName": {
            "type": "string",
            "description": "Name of the database."
          },
          "UserName": {
            "type": "string",
            "description": "Username of the database server.  <br /> <blockquote>Check the permission required for the database users [here](https://staginghelp.boldbi.com/embedded-bi/faq/what-are-the-database-permissions-required-to-set-up-bold-bi-embedded/)</blockquote>"
          },
          "Password": {
            "type": "string",
            "description": "Password of the database user."
          },
          "IsNewDatabase": {
            "type": "boolean",
            "default": "false",
            "description": "Determines whether the <code>DatabaseName</code> is new or existing."
          },
          "MaintenanceDatabase": {
            "type": "string",
            "description": "Maintenance database of the database server.<br /> <blockquote>Required only for <code>PostgreSQL</code> database server.</blockquote>"
          },
          "Port": {
            "type": "string",
            "description": "Port number of the database server.<br /><blockquote>Required only for <code>PostgreSQL</code> and <code>MySQL</code> database servers.</blockquote>"
          },
          "ServerType": {
            "description": "Database type of the server.",
            "$ref": "#/components/schemas/DatabaseType"
          }
        }
      }
	}
  }
 } 